buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.20.0'
    }
}

plugins {
    id "com.palantir.consistent-versions" version "2.9.0"
    id "com.palantir.git-version" version "0.14.0"
    id "idea"
    id "org.inferred.processors" version "3.6.0"
    id 'maven-publish'
    id "com.jfrog.artifactory" version "4.28.1"
    id "com.palantir.baseline-class-uniqueness" version "4.100.0"
    id "net.ltgt.errorprone" version "2.0.2"
    id 'checkstyle'
    id "com.diffplug.spotless" version "6.4.2"
}

group 'com.fern.openapi'
version gitVersion()

allprojects {

    apply plugin: "idea"
    apply plugin: "org.inferred.processors"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.artifactory"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "checkstyle"
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'com.palantir.java-format'

    version rootProject.version
    group rootProject.group

    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://usebirch.jfrog.io/artifactory/default-maven-local"
            name "usebirch-jfrog"
            credentials {
                username = "$System.env.JFROG_USERNAME"
                password = "$System.env.JFROG_API_KEY"
            }
        }
    }

    dependencies {
        errorprone("com.google.errorprone:error_prone_core")
    }

    checkstyle {
        toolVersion '8.41'
    }

    spotless {
        java {
            target 'src/main/java/**/*.java', 'src/main/test/**/*.java'
            importOrder("")
            removeUnusedImports()
            trimTrailingWhitespace()
            indentWithSpaces(4)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.errorprone.disableWarningsInGeneratedCode = true
    }
}

idea {
    project {
        ipr {
            withXml {provider -> addCodeStyle(provider)}
        }
    }
}

def addCodeStyle(provider) {
    def ideaStyleFile = project.file("config/idea/intellij-java-style.xml")
    provider.asNode().append(new XmlParser().parse(ideaStyleFile).component)

    // import into intellij
    def ideaDirectory = new File(".idea");
    ideaDirectory.mkdir()
    def codeStyleDirectory = new File(".idea/codeStyles");
    codeStyleDirectory.mkdir()

    def codeStyleConfig = new File(".idea/codeStyles/codeStyleConfig.xml");
    codeStyleConfig.createNewFile();
    codeStyleConfig.text = project.file("config/idea/codeStyles/codeStyleConfig.xml").text

    def projectConfig = new File(".idea/codeStyles/Project.xml")
    projectConfig.createNewFile();
    projectConfig.text = project.file("config/idea/codeStyles/Project.xml").text
}

artifactory {
    contextUrl = 'https://usebirch.jfrog.io/artifactory'
    publish {
        contextUrl = 'https://usebirch.jfrog.io/artifactory'
        repository {
            repoKey = 'default-maven-local'
            username = "$System.env.JFROG_USERNAME"
            password = "$System.env.JFROG_API_KEY"
        }
        defaults {
            publishArtifacts = true
        }
    }
}
